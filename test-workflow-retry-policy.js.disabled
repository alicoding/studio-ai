import ky from 'ky';

const API_BASE = 'http://localhost:3457/api';

async function testRetryPolicy() {
  console.log('🧪 Testing LangGraph RetryPolicy implementation...\n');

  // First, get a valid project ID
  console.log('🔍 Getting project list...');
  const response = await ky.get(`${API_BASE}/studio-projects`).json();
  const projects = response.projects || response;
  if (!projects || projects.length === 0) {
    throw new Error('No projects found. Please create a project first.');
  }
  const projectId = projects[0].id;
  console.log(`📁 Using project: ${projects[0].name} (${projectId})\n`);

  // Create workflows that will test retry behavior
  const tests = [
    {
      name: 'Transient Failure Test',
      description: 'Should retry and eventually succeed',
      workflow: {
        workflow: [
          {
            id: 'flaky_step',
            role: 'developer',
            task: 'Simulate a flaky network operation that fails 2 times then succeeds'
          }
        ],
        threadId: `retry-test-transient-${Date.now()}`,
        projectId: projectId
      }
    },
    {
      name: 'Permanent Failure Test', 
      description: 'Should fail after max retry attempts',
      workflow: {
        workflow: [
          {
            id: 'failing_step',
            role: 'developer',
            task: 'Simulate an operation that always fails with "Network timeout"'
          }
        ],
        threadId: `retry-test-permanent-${Date.now()}`,
        projectId: projectId
      }
    },
    {
      name: 'Non-Retryable Error Test',
      description: 'Should fail immediately without retry',
      workflow: {
        workflow: [
          {
            id: 'auth_fail_step',
            role: 'developer',
            task: 'Simulate an operation that fails with "unauthorized" error'
          }
        ],
        threadId: `retry-test-noretry-${Date.now()}`,
        projectId: projectId
      }
    }
  ];

  // Run each test
  for (const test of tests) {
    console.log(`\n🔧 ${test.name}`);
    console.log(`   ${test.description}`);
    console.log(`   Thread ID: ${test.workflow.threadId}`);
    
    try {
      const startTime = Date.now();
      const result = await ky.post(`${API_BASE}/invoke`, {
        json: test.workflow,
        timeout: 120000 // 2 minutes to allow for retries
      }).json();
      
      const duration = Date.now() - startTime;
      console.log(`   ✅ Result: ${result.status || 'completed'} in ${(duration/1000).toFixed(1)}s`);
      
      if (result.summary) {
        console.log(`   📊 Summary:`, result.summary);
      }
      
      // Check retry behavior in logs
      console.log(`   💡 Check server logs for retry attempts`);
      
    } catch (error) {
      const duration = Date.now() - startTime;
      console.log(`   ❌ Failed as expected in ${(duration/1000).toFixed(1)}s`);
      if (error.response) {
        const body = await error.response.text();
        console.log(`   Error: ${body}`);
      }
    }
  }

  // Instructions for manual verification
  console.log('\n📝 Manual Verification Steps:');
  console.log('1. Check dev server logs for retry attempts');
  console.log('2. Look for retry intervals: 1s → 2s → 4s (with jitter)');
  console.log('3. Verify max 3 attempts for retryable errors');
  console.log('4. Verify no retries for non-retryable errors (unauthorized)');
  console.log('5. Check PostgreSQL for checkpoint saves between retries:');
  console.log(`   docker exec claude_studio_postgres psql -U claude -d claude_studio -c "SELECT thread_id, COUNT(*) as checkpoint_count FROM workflow_checkpoints.checkpoints WHERE thread_id LIKE 'retry-test-%' GROUP BY thread_id;"`);
}

// Run the test
console.log('🚀 Starting RetryPolicy test...\n');
console.log('📌 Prerequisites:');
console.log('  - USE_POSTGRES_SAVER=true in .env');
console.log('  - PostgreSQL container running');
console.log('  - Dev server running on port 3457');
console.log('  - RetryPolicy implemented in WorkflowOrchestrator\n');

testRetryPolicy()
  .then(() => {
    console.log('\n✅ Test scenarios completed!');
    console.log('Check server logs to verify retry behavior.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n❌ Test failed:', error.message);
    process.exit(1);
  });