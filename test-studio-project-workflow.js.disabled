#!/usr/bin/env node

/**
 * Test Studio Project workflow with agents
 * 
 * SOLID: Single responsibility - test Studio projects
 * DRY: Reuses API endpoints
 * KISS: Simple sequential test flow
 */

import ky from 'ky'

const API_BASE = 'http://localhost:3457/api'

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
}

function log(emoji, message, color = '') {
  console.log(`${color}${emoji} ${message}${colors.reset}`)
}

async function main() {
  log('üöÄ', 'Testing Studio Project workflow...', colors.bright)
  
  let projectId
  let projectPath
  
  try {
    // Step 1: Get available agent configs first
    log('1Ô∏è‚É£', 'Getting agent configurations...', colors.blue)
    
    const agents = await ky.get(`${API_BASE}/agents`).json()
    log('üìä', `Found ${agents.length} agent configs`)
    
    const devAgent = agents.find(a => a.role === 'dev' || a.role === 'developer')
    const uxAgent = agents.find(a => a.role === 'ux' || a.role === 'designer')
    
    if (!devAgent || !uxAgent) {
      throw new Error('Required agents (dev, ux) not found')
    }
    
    // Step 2: Create a Studio project with agents
    log('2Ô∏è‚É£', 'Creating Studio project with agents...', colors.blue)
    
    const timestamp = Date.now()
    projectPath = `/tmp/studio-test-${timestamp}`
    
    const projectData = {
      name: `Studio Test Project ${timestamp}`,
      description: 'Test project for agent workflow',
      workspacePath: projectPath,
      claudeInstructions: '# Test Project\n\nThis is a test project for Studio workflow testing.',
      agents: [
        {
          role: 'dev',
          agentConfigId: devAgent.id,
          customName: 'Test Developer'
        },
        {
          role: 'ux',
          agentConfigId: uxAgent.id,
          customName: 'Test Designer'
        }
      ]
    }
    
    const project = await ky.post(`${API_BASE}/studio-projects`, {
      json: projectData
    }).json()
    
    projectId = project.id
    log('‚úÖ', `Project created: ${project.name} (${projectId})`, colors.green)
    log('üë•', `With agents: ${project.agents.map(a => a.role).join(', ')}`)
    
    // Step 3: Get project agents with short IDs
    log('3Ô∏è‚É£', 'Getting project agents with short IDs...', colors.blue)
    
    const projectAgents = await ky.get(`${API_BASE}/studio-projects/${projectId}/agents/short-ids`).json()
    log('üë•', `Project agents: ${projectAgents.agents.map(a => `${a.shortId} (${a.role})`).join(', ')}`)
    
    const devShortId = projectAgents.agents.find(a => a.role === 'dev')?.shortId
    const uxShortId = projectAgents.agents.find(a => a.role === 'ux')?.shortId
    
    if (!devShortId || !uxShortId) {
      throw new Error('Failed to get agent short IDs')
    }
    
    // Step 4: Test single agent invocation with agentId
    log('4Ô∏è‚É£', 'Testing single agent invocation...', colors.blue)
    
    const singleResult = await ky.post(`${API_BASE}/invoke`, {
      json: {
        workflow: {
          agentId: devShortId,
          task: 'What is 3 + 3? Just give the number.'
        },
        projectId: projectId,
        format: 'json'
      },
      timeout: 30000
    }).json()
    
    log('‚úÖ', `Single agent result: ${JSON.stringify(singleResult.results)}`, colors.green)
    
    // Step 5: Test multi-agent workflow
    log('5Ô∏è‚É£', 'Testing multi-agent workflow...', colors.blue)
    
    const workflowResult = await ky.post(`${API_BASE}/invoke`, {
      json: {
        workflow: [
          {
            id: 'calculate',
            agentId: devShortId,
            task: 'Calculate 5 + 5 and just give the number'
          },
          {
            id: 'design',
            agentId: uxShortId,
            task: 'Create a simple emoji design for the number {calculate.output}',
            deps: ['calculate']
          }
        ],
        projectId: projectId,
        format: 'json'
      },
      timeout: 60000
    }).json()
    
    log('‚úÖ', `Workflow completed: ${workflowResult.status}`, colors.green)
    log('üìä', 'Results:', colors.blue)
    Object.entries(workflowResult.results).forEach(([id, output]) => {
      log('  ‚Ä¢', `${id}: ${output}`)
    })
    
    // Step 6: Test role-based fallback (when only one agent matches)
    log('6Ô∏è‚É£', 'Testing role-based resolution...', colors.blue)
    
    const roleResult = await ky.post(`${API_BASE}/invoke`, {
      json: {
        workflow: {
          role: 'dev', // Should resolve to dev_01 since only one dev agent
          task: 'What is 7 + 7? Just give the number.'
        },
        projectId: projectId,
        format: 'json'
      },
      timeout: 30000
    }).json()
    
    log('‚úÖ', `Role-based result: ${JSON.stringify(roleResult.results)}`, colors.green)
    
    // Step 7: Clean up
    log('7Ô∏è‚É£', 'Cleaning up...', colors.blue)
    
    await ky.delete(`${API_BASE}/studio-projects/${projectId}`)
    log('‚úÖ', 'Project deleted', colors.green)
    
    // Summary
    log('\nüìä', 'TEST SUMMARY:', colors.bright)
    log('‚úÖ', 'Studio project creation', colors.green)
    log('‚úÖ', 'Agent assignment to project', colors.green)
    log('‚úÖ', 'Short ID generation (dev_01, ux_01)', colors.green)
    log('‚úÖ', 'Single agent invocation by ID', colors.green)
    log('‚úÖ', 'Multi-agent workflow with dependencies', colors.green)
    log('‚úÖ', 'Role-based resolution', colors.green)
    log('‚úÖ', 'Project cleanup', colors.green)
    
    log('\nüéØ', '7/7 tests passed', colors.green)
    
  } catch (error) {
    log('‚ùå', `Test failed: ${error.message}`, colors.red)
    console.error(error)
    
    // Cleanup on error
    if (projectId) {
      try {
        await ky.delete(`${API_BASE}/studio-projects/${projectId}`)
        log('üßπ', 'Cleaned up project after error', colors.yellow)
      } catch (cleanupError) {
        log('‚ö†Ô∏è', 'Failed to clean up project', colors.yellow)
      }
    }
    
    process.exit(1)
  }
}

main()