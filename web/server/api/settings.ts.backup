import { Router } from 'express'
import { ServerConfigService } from '../services/ServerConfigService'

const router = Router()
const configService = ServerConfigService.getInstance()

// Initialize config service on startup
configService.initialize().catch(console.error)

// GET /api/settings/system - Get system settings
router.get('/system', async (_req, res) => {
  try {
    const config = await configService.getSystemConfig()
    res.json(config)
  } catch (error) {
    console.error('Failed to load system settings:', error)
    res.status(500).json({ error: 'Failed to load system settings' })
  }
})

// GET /api/settings/all-hooks - Get hooks from all three native locations
router.get('/all-hooks', async (req, res) => {
  try {
    const { readFile } = await import('fs/promises')
    const { join } = await import('path')
    const { homedir } = await import('os')

    // Helper to read JSON file safely
    const readJsonFile = async (filePath: string): Promise<any> => {
      try {
        const content = await readFile(filePath, 'utf-8')
        return JSON.parse(content)
      } catch {
        return null
      }
    }

    // Get project path from query or use current directory
    const projectPath = (req.query.projectPath as string) || process.cwd()

    // Read from all three locations
    const userSettingsPath = join(homedir(), '.claude', 'settings.json')
    const projectSettingsPath = join(projectPath, '.claude', 'settings.json')
    const projectLocalSettingsPath = join(projectPath, '.claude', 'settings.local.json')

    const [userSettings, projectSettings, projectLocalSettings] = await Promise.all([
      readJsonFile(userSettingsPath),
      readJsonFile(projectSettingsPath),
      readJsonFile(projectLocalSettingsPath),
    ])

    // Get Studio config
    const config = await configService.getSystemConfig()

    res.json({
      config: config,
      hooks: {
        user: userSettings,
        project: projectSettings,
        projectLocal: projectLocalSettings,
      },
    })
  } catch (error) {
    console.error('Failed to load all hooks:', error)
    res.status(500).json({ error: 'Failed to load hooks' })
  }
})

// PUT /api/settings/system - Update system settings
router.put('/system', async (req, res) => {
  try {
    const { hooks, ...systemConfig } = req.body

    // Update Studio's internal config
    await configService.updateSystemConfig(systemConfig)

    // Also write hooks to Claude Code settings.json
    if (hooks) {
      const { writeFile, readFile, mkdir } = await import('fs/promises')
      const { join, dirname } = await import('path')
      const { homedir } = await import('os')

      const claudeSettingsPath = join(homedir(), '.claude', 'settings.json')

      // Ensure directory exists
      await mkdir(dirname(claudeSettingsPath), { recursive: true })

      // Read existing Claude settings
      let claudeSettings: Record<string, unknown> = {}
      try {
        const content = await readFile(claudeSettingsPath, 'utf-8')
        claudeSettings = JSON.parse(content)
      } catch {
        // File doesn't exist or is invalid
      }

      // Update hooks while preserving other settings
      claudeSettings.hooks = hooks

      // Write back to Claude settings
      await writeFile(claudeSettingsPath, JSON.stringify(claudeSettings, null, 2))
      console.log('Updated Claude Code hooks in', claudeSettingsPath)
    }

    res.json({ success: true })
  } catch (error) {
    console.error('Failed to update system settings:', error)
    res.status(500).json({ error: 'Failed to update system settings' })
  }
})

// GET /api/settings/project/:projectId - Get project settings
router.get('/project/:projectId', async (req: any, res: any) => {
  try {
    const project = await configService.getProject(req.params.projectId)
    if (!project) {
      return res.status(404).json({ error: 'Project not found' })
    }
    res.json(project.settings)
  } catch (error) {
    console.error('Failed to load project settings:', error)
    res.status(500).json({ error: 'Failed to load project settings' })
  }
})

// PUT /api/settings/project/:projectId - Update project settings
router.put('/project/:projectId', async (req, res) => {
  try {
    await configService.updateProject(req.params.projectId, {
      settings: req.body,
    })
    res.json({ success: true })
  } catch (error) {
    console.error('Failed to update project settings:', error)
    res.status(500).json({ error: 'Failed to update project settings' })
  }
})

// GET /api/settings/teams - Get all team templates
router.get('/teams', async (_req, res) => {
  try {
    const teams = await configService.listTeams()
    res.json(teams)
  } catch (error) {
    console.error('Failed to load teams:', error)
    res.status(500).json({ error: 'Failed to load teams' })
  }
})

// POST /api/settings/teams - Create team template
router.post('/teams', async (req, res) => {
  try {
    const { v4: uuidv4 } = await import('uuid')
    const newTeam = await configService.createTeam({
      id: uuidv4(),
      name: req.body.name,
      description: req.body.description || '',
      agents: req.body.agents || [],
      created: new Date().toISOString(),
    })
    res.status(201).json(newTeam)
  } catch (error) {
    console.error('Failed to create team:', error)
    res.status(500).json({ error: 'Failed to create team' })
  }
})

// GET /api/settings/playground-defaults - Get configurable playground defaults
router.get('/playground-defaults', async (req: any, res: any) => {
  try {
    const path = await import('path')
    const os = await import('os')
    const defaultsPath = path.join(os.homedir(), '.claude-studio', 'playground-defaults.json')
    const fs = await import('fs/promises')
    
    try {
      // Try to read custom defaults from config file
      const data = await fs.readFile(defaultsPath, 'utf-8')
      const defaults = JSON.parse(data)
      res.json(defaults)
    } catch (_error) {
      // Return built-in defaults if no custom config exists
      const builtInDefaults = {
        model: 'gpt-4o',
        systemPrompt: 'You are a helpful AI assistant.',
        temperature: 0.7,
        maxTokens: 2000
      }
      res.json(builtInDefaults)
    }
  } catch (error) {
    console.error('Failed to get playground defaults:', error)
    res.status(500).json({ error: 'Failed to get playground defaults' })
  }
})

// GET /api/settings/playground - Get playground settings
router.get('/playground', async (req: any, res: any) => {
  try {
    const path = await import('path')
    const os = await import('os')
    const configDir = path.join(os.homedir(), '.claude-studio')
    const settingsPath = path.join(configDir, 'playground-settings.json')
    const defaultsPath = path.join(configDir, 'playground-defaults.json')
    const fs = await import('fs/promises')
    
    try {
      const data = await fs.readFile(settingsPath, 'utf-8')
      const settings = JSON.parse(data)
      res.json(settings)
    } catch (_error) {
      // Get defaults from configuration file instead of hardcoding
      try {
        const defaultsData = await fs.readFile(defaultsPath, 'utf-8')
        const defaultSettings = JSON.parse(defaultsData)
        res.json(defaultSettings)
      } catch (_defaultsError) {
        // Final fallback to built-in defaults
        const builtInDefaults = {
          model: 'gpt-4o',
          systemPrompt: 'You are a helpful AI assistant.',
          temperature: 0.7,
          maxTokens: 2000
        }
        res.json(builtInDefaults)
      }
    }
  } catch (error) {
    console.error('Failed to get playground settings:', error)
    res.status(500).json({ error: 'Failed to get playground settings' })
  }
})

// PUT /api/settings/playground - Save playground settings
router.put('/playground', async (req: any, res: any) => {
  try {
    const settings = req.body
    
    if (!settings || typeof settings !== 'object') {
      return res.status(400).json({ error: 'Settings object is required' })
    }
    
    const path = await import('path')
    const os = await import('os')
    const settingsPath = path.join(os.homedir(), '.claude-studio', 'playground-settings.json')
    const fs = await import('fs/promises')
    
    // Ensure directory exists
    await fs.mkdir(path.dirname(settingsPath), { recursive: true })
    
    // Save settings
    await fs.writeFile(settingsPath, JSON.stringify(settings, null, 2))
    
    res.json({ success: true, settings })
  } catch (error) {
    console.error('Failed to save playground settings:', error)
    res.status(500).json({ error: 'Failed to save playground settings' })
  }
})

export default router
