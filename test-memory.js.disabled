#!/usr/bin/env node

/**
 * Simple test to verify LangGraph memory persistence
 */

const API_BASE = 'http://localhost:3456/api';

async function testMemory() {
  console.log('🧪 Testing LangGraph Memory\n');
  
  const sessionId = `test-memory-${Date.now()}`;
  
  // First call
  console.log('1️⃣ First message...');
  const response1 = await fetch(`${API_BASE}/ai/execute`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      capabilityId: 'debugging',
      input: 'Remember this: The secret code is BANANA',
      context: { sessionId }
    })
  });
  
  const result1 = await response1.json();
  console.log('Response:', result1.content?.substring(0, 200) + '...');
  console.log('Session:', result1.sessionId);
  console.log('Turn count:', result1.metadata?.turnCount);
  
  // Second call - same session
  console.log('\n2️⃣ Second message (same session)...');
  const response2 = await fetch(`${API_BASE}/ai/execute`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      capabilityId: 'debugging',
      input: 'What was the secret code I just told you?',
      context: { sessionId }
    })
  });
  
  const result2 = await response2.json();
  console.log('Response:', result2.content?.substring(0, 200) + '...');
  console.log('Turn count:', result2.metadata?.turnCount);
  
  if (result2.content?.includes('BANANA')) {
    console.log('\n✅ SUCCESS: Memory is working!');
  } else {
    console.log('\n❌ FAIL: No memory of previous message');
  }
  
  // Check history endpoint
  console.log('\n3️⃣ Checking conversation history...');
  const historyResponse = await fetch(`${API_BASE}/ai/conversation/${sessionId}`);
  if (historyResponse.ok) {
    const history = await historyResponse.json();
    console.log('Total messages:', history.messages?.length || 0);
    history.messages?.forEach((msg, i) => {
      console.log(`  ${i + 1}. ${msg.role}: ${msg.content.substring(0, 50)}...`);
    });
  } else {
    console.log('No history endpoint available');
  }
}

testMemory().catch(console.error);