#!/usr/bin/env node

const API_URL = 'http://localhost:3456/api';

async function testAsyncWorkflow() {
  console.log('1. Starting async workflow...');
  
  // Start async workflow
  const startResponse = await fetch(`${API_URL}/invoke/async`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      workflow: {
        role: 'dev',
        task: 'Test async workflow - say hello and count to 3'
      },
      projectId: '40cefd44-8ef0-472d-83b9-fbce7642e010'
    })
  });
  
  const { threadId, status } = await startResponse.json();
  console.log(`   Started: threadId=${threadId}, status=${status}`);
  
  console.log('\n2. Connecting to SSE stream...');
  
  // Connect to SSE stream
  const eventSource = new EventSource(`${API_URL}/invoke/stream/${threadId}`);
  
  eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log(`   Event: ${data.type}`, data);
  };
  
  eventSource.onerror = (error) => {
    console.error('   SSE Error:', error);
    eventSource.close();
  };
  
  // Check status periodically
  console.log('\n3. Checking status...');
  
  const checkStatus = async () => {
    const statusResponse = await fetch(`${API_URL}/invoke/status/${threadId}`);
    const statusData = await statusResponse.json();
    console.log(`   Status:`, statusData);
    
    if (statusData.status === 'completed' || statusData.status === 'failed') {
      console.log('\n4. Workflow finished!');
      eventSource.close();
      process.exit(0);
    }
  };
  
  // Check status every 2 seconds
  setInterval(checkStatus, 2000);
  
  // Timeout after 30 seconds
  setTimeout(() => {
    console.log('\nTimeout reached, closing...');
    eventSource.close();
    process.exit(1);
  }, 30000);
}

testAsyncWorkflow().catch(console.error);