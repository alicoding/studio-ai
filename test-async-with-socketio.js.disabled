import { io } from 'socket.io-client';
import fetch from 'node-fetch';

async function testAsyncWorkflow() {
  // Connect to Socket.io
  const socket = io('http://localhost:3456');
  
  const events = [];
  
  socket.on('connect', () => {
    console.log('✅ Connected to Socket.io');
  });
  
  socket.on('workflow:update', (data) => {
    console.log('📡 Socket.io workflow event:', JSON.stringify(data, null, 2));
    events.push(data);
  });
  
  socket.on('message:new', (data) => {
    console.log('💬 Socket.io message event:', JSON.stringify(data, null, 2));
  });
  
  // Wait for connection
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Start async workflow
  console.log('\n🚀 Starting async workflow...');
  const response = await fetch('http://localhost:3456/api/invoke/async', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      workflow: {
        role: 'developer',
        task: 'Count from 1 to 3, saying each number'
      },
      projectId: '93b33a8b-dbc0-4b09-99ed-cb737239b409'
    })
  });
  
  const result = await response.json();
  console.log('📋 Async response:', result);
  
  // Wait for events
  console.log('\n⏳ Waiting for workflow events...');
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  // Check final status
  console.log('\n📊 Checking final status...');
  const statusResponse = await fetch(`http://localhost:3456/api/invoke-status/status/${result.threadId}`);
  const status = await statusResponse.json();
  console.log('Final status:', JSON.stringify(status, null, 2));
  
  // Summary
  console.log('\n📈 Event Summary:');
  console.log(`Total events received: ${events.length}`);
  events.forEach((event, i) => {
    console.log(`  ${i + 1}. ${event.type} ${event.stepId ? `(step: ${event.stepId})` : ''}`);
  });
  
  socket.close();
  process.exit(0);
}

testAsyncWorkflow().catch(err => {
  console.error('❌ Error:', err);
  process.exit(1);
});