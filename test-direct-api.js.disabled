#!/usr/bin/env node

/**
 * Direct API test to verify context passing and multi-turn conversations
 * Tests without going through MCP
 */

const API_BASE = 'http://localhost:3456/api';

async function testDirectAPI() {
  console.log('🧪 Testing Direct API (bypassing MCP)\n');
  
  // First, ensure test file exists
  const { writeFile } = await import('fs/promises');
  const testFilePath = '/tmp/test-context.js';
  const testContent = `// Test file for context passing
function calculateAverage(numbers) {
  // BUG: Missing initial value for reduce
  const sum = numbers.reduce((acc, num) => acc + num);
  return sum / numbers.length;
}

module.exports = { calculateAverage };`;
  
  await writeFile(testFilePath, testContent);
  console.log('✅ Created test file:', testFilePath);
  
  // Test 1: Simple execution without context
  console.log('\n1️⃣ Testing without file context...');
  const response1 = await fetch(`${API_BASE}/ai/execute`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      capabilityId: 'debugging',
      input: 'What is the bug in the calculateAverage function?'
    })
  });
  
  const result1 = await response1.json();
  console.log('Response:', result1.content?.substring(0, 200) + '...');
  console.log('Session ID:', result1.sessionId);
  const sessionId = result1.sessionId;
  
  // Test 2: With file context
  console.log('\n2️⃣ Testing with file context...');
  const response2 = await fetch(`${API_BASE}/ai/execute`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      capabilityId: 'debugging',
      input: 'What is the bug in the calculateAverage function?',
      context: {
        projectId: '/tmp',
        files: ['test-context.js'],
        sessionId: 'test-session-2'
      }
    })
  });
  
  const result2 = await response2.json();
  console.log('Response:', result2.content?.substring(0, 400) + '...');
  
  if (result2.content?.includes('reduce') || result2.content?.includes('initial value')) {
    console.log('✅ SUCCESS: AI detected the actual bug!');
  } else {
    console.log('❌ FAIL: AI didn\'t see the file content');
  }
  
  // Test 3: Multi-turn conversation
  console.log('\n3️⃣ Testing multi-turn conversation...');
  const response3 = await fetch(`${API_BASE}/ai/execute`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      capabilityId: 'debugging',
      input: 'Can you fix the bug you just found?',
      context: {
        sessionId: sessionId // Use same session
      }
    })
  });
  
  const result3 = await response3.json();
  console.log('Response:', result3.content?.substring(0, 300) + '...');
  console.log('Turn count:', result3.metadata?.turnCount);
  
  if (result3.content?.includes('found') || result3.content?.includes('identified')) {
    console.log('✅ SUCCESS: AI remembers previous conversation!');
  } else {
    console.log('❌ FAIL: AI doesn\'t remember previous messages');
  }
  
  // Test 4: Check conversation history
  console.log('\n4️⃣ Checking conversation history...');
  const response4 = await fetch(`${API_BASE}/ai/conversation/${sessionId}`);
  if (response4.ok) {
    const history = await response4.json();
    console.log('Messages in history:', history.messages?.length || 0);
    if (history.messages?.length > 0) {
      console.log('First message:', history.messages[0].content.substring(0, 100) + '...');
    }
  }
  
  console.log('\n✅ Direct API tests complete!');
}

testDirectAPI().catch(console.error);