#!/usr/bin/env node

/**
 * Test AI Capabilities session management
 */

const API_BASE = 'http://localhost:3456/api'

async function testAICapabilities() {
  console.log('🧪 Testing AI Capabilities Session Management\n')
  
  try {
    // First call - creates session
    console.log('1️⃣ First message (creates session)...')
    const response1 = await fetch(`${API_BASE}/ai/execute`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        capabilityId: 'debugging',
        input: 'Remember this: The fruit is ORANGE',
        projectId: 'test-project'
        // No sessionId - will auto-create
      })
    })
    
    if (!response1.ok) {
      throw new Error(`First call failed: ${response1.status}`)
    }
    
    const result1 = await response1.json()
    console.log('📝 Response:', result1.content?.substring(0, 100) + '...')
    const firstSessionId = result1.sessionId
    console.log('🔑 Session ID returned:', firstSessionId)
    console.log('🔢 Turn count:', result1.metadata?.turnCount || 0)
    
    console.log('\n---\n')
    
    // Second call - continues session using the RETURNED session ID
    console.log('2️⃣ Second message (continues session with returned ID)...')
    const response2 = await fetch(`${API_BASE}/ai/execute`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        capabilityId: 'debugging',
        input: 'What was the fruit I just told you?',
        context: {
          projectId: 'test-project',
          sessionId: firstSessionId // Use the session ID returned from first call
        }
      })
    })
    
    if (!response2.ok) {
      throw new Error(`Second call failed: ${response2.status}`)
    }
    
    const result2 = await response2.json()
    console.log('📝 Response:', result2.content?.substring(0, 200) + '...')
    const latestSessionId = result2.sessionId
    console.log('🔑 Session ID returned:', latestSessionId)
    console.log('🔢 Turn count:', result2.metadata?.turnCount || 0)
    
    if (result2.content?.includes('ORANGE')) {
      console.log('\n✅ SUCCESS: Memory is working!')
    } else {
      console.log('\n❌ FAIL: Memory not working')
    }
    
    console.log('\n---\n')
    
    // Check conversation history using LATEST session ID
    console.log('3️⃣ Checking conversation history with latest session ID...')
    const historyResponse = await fetch(`${API_BASE}/ai/conversation/${latestSessionId}`)
    
    if (historyResponse.ok) {
      const history = await historyResponse.json()
      console.log('📜 Total messages:', history.messages?.length || 0)
      history.messages?.forEach((msg, i) => {
        console.log(`  ${i + 1}. ${msg.role}: ${msg.content.substring(0, 50)}...`)
      })
    }
    
  } catch (error) {
    console.error('❌ Test failed:', error.message)
  }
}

// Check if server is running
fetch(`${API_BASE}/health`)
  .then(() => testAICapabilities())
  .catch(() => {
    console.error('❌ Server not running! Start with: npm run server')
  })