/**
 * Direct test of architect role resolution
 * Simple JavaScript test to verify architect role resolution works
 */

const API_URL = 'http://localhost:3456/api'

async function testArchitectRole() {
  console.log('üèóÔ∏è  Testing Architect Role Resolution\n')
  
  // Test 1: Check if architect role exists in global agents
  console.log('1Ô∏è‚É£  Checking for global architect configurations...')
  try {
    const response = await fetch(`${API_URL}/agent-configs`)
    const agents = await response.json()
    
    const architectAgents = agents.filter(a => a.role?.toLowerCase() === 'architect')
    
    if (architectAgents.length > 0) {
      console.log('‚úÖ Found architect configurations:')
      architectAgents.forEach(agent => {
        console.log(`   - ${agent.name} (ID: ${agent.id})`)
        console.log(`     Model: ${agent.model || 'default'}`)
        console.log(`     Tools: ${agent.tools?.length || 0} configured`)
      })
    } else {
      console.log('‚ö†Ô∏è  No global architect configurations found')
    }
    console.log()
  } catch (error) {
    console.error('‚ùå Failed to fetch agent configs:', error.message)
  }
  
  // Test 2: Try to invoke with architect role
  console.log('2Ô∏è‚É£  Testing architect role in workflow...')
  const testProjectId = 'test-architect-' + Date.now()
  
  // Create a test project
  try {
    await fetch(`${API_URL}/studio-projects`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        id: testProjectId,
        name: 'Architect Test Project',
        description: 'Testing architect role resolution'
      })
    })
    console.log(`‚úÖ Created test project: ${testProjectId}`)
  } catch (error) {
    console.log('‚ÑπÔ∏è  Could not create test project (may already exist)')
  }
  
  // Test role resolution
  const threadId = `architect-test-${Date.now()}`
  console.log(`\n3Ô∏è‚É£  Invoking workflow with architect role (thread: ${threadId})...`)
  
  try {
    const response = await fetch(`${API_URL}/invoke`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        workflow: {
          role: 'architect',
          task: 'Design a simple REST API structure for a todo application'
        },
        threadId: threadId,
        projectId: testProjectId
      })
    })
    
    if (response.ok) {
      const result = await response.json()
      console.log('‚úÖ Workflow initiated successfully!')
      console.log(`   Thread ID: ${result.threadId}`)
      
      // Wait a bit and check status
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const statusResponse = await fetch(`${API_URL}/invoke-status/${threadId}`)
      if (statusResponse.ok) {
        const status = await statusResponse.json()
        console.log(`   Status: ${status.status}`)
        if (status.steps) {
          console.log(`   Steps: ${status.steps.length}`)
          status.steps.forEach(step => {
            console.log(`     - ${step.role || step.agentId}: ${step.status}`)
          })
        }
      }
    } else {
      const error = await response.json()
      console.log('‚ùå Workflow failed:', error.error)
      
      // Analyze the error
      if (error.error.includes('No agent found for role')) {
        console.log('\nüìã Resolution Analysis:')
        console.log('   - Checked project agents: Yes')
        console.log('   - Checked global agents: Yes')
        console.log('   - Result: No architect agent configured')
        console.log('\nüí° To fix: Create an architect agent configuration or add one to the project')
      }
    }
  } catch (error) {
    console.error('‚ùå Request failed:', error.message)
  }
  
  // Test 4: Check role resolution with different case variations
  console.log('\n4Ô∏è‚É£  Testing case-insensitive role resolution...')
  const caseVariations = ['Architect', 'ARCHITECT', 'architect']
  
  for (const roleVariation of caseVariations) {
    try {
      const response = await fetch(`${API_URL}/invoke`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          workflow: {
            role: roleVariation,
            task: 'Test case sensitivity'
          },
          threadId: `case-test-${Date.now()}`,
          projectId: testProjectId
        })
      })
      
      if (response.ok) {
        console.log(`‚úÖ "${roleVariation}" - resolved successfully`)
      } else {
        const error = await response.json()
        if (error.error.includes('No agent found')) {
          console.log(`‚úÖ "${roleVariation}" - role lookup worked (agent not configured)`)
        } else {
          console.log(`‚ùå "${roleVariation}" - unexpected error: ${error.error}`)
        }
      }
    } catch (error) {
      console.log(`‚ùå "${roleVariation}" - request failed: ${error.message}`)
    }
  }
  
  // Test 5: Multi-step workflow with architect
  console.log('\n5Ô∏è‚É£  Testing multi-step workflow with architect role...')
  try {
    const response = await fetch(`${API_URL}/invoke`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        workflow: [
          {
            id: 'design',
            role: 'architect',
            task: 'Design database schema for a blog'
          },
          {
            id: 'review',
            role: 'architect',
            task: 'Review and optimize: {design.output}',
            deps: ['design']
          }
        ],
        threadId: `multi-architect-${Date.now()}`,
        projectId: testProjectId
      })
    })
    
    if (response.ok) {
      console.log('‚úÖ Multi-step architect workflow accepted')
    } else {
      const error = await response.json()
      console.log('‚ÑπÔ∏è  Multi-step workflow validation:', error.error.split(':')[0])
    }
  } catch (error) {
    console.log('‚ùå Multi-step request failed:', error.message)
  }
  
  console.log('\n‚ú® Architect role resolution test complete!')
}

// Run the test
testArchitectRole().catch(console.error)