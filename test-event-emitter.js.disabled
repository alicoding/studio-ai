import fetch from 'node-fetch';

async function testEventEmitter() {
  const { default: EventSource } = await import('eventsource');
  
  console.log('🚀 Testing EventEmitter integration...\n');
  
  // Start async workflow
  const response = await fetch('http://localhost:3456/api/invoke/async', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      workflow: {
        role: 'developer',
        task: 'Say hello world'
      },
      projectId: '93b33a8b-dbc0-4b09-99ed-cb737239b409'
    })
  });
  
  const result = await response.json();
  console.log('📋 Async response:', result);
  
  // Connect to SSE stream
  console.log('\n📡 Connecting to SSE stream...');
  const eventSource = new EventSource(`http://localhost:3456/api/invoke/stream/${result.threadId}`);
  
  const events = [];
  
  eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('SSE Event:', JSON.stringify(data, null, 2));
    events.push(data);
  };
  
  eventSource.onerror = (error) => {
    console.error('SSE Error:', error);
  };
  
  // Wait for events
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  eventSource.close();
  
  // Check final status
  console.log('\n📊 Final status:');
  const statusResponse = await fetch(`http://localhost:3456/api/invoke-status/status/${result.threadId}`);
  const status = await statusResponse.json();
  console.log(JSON.stringify(status, null, 2));
  
  console.log('\n📈 SSE Event Summary:');
  console.log(`Total events received: ${events.length}`);
  events.forEach((event, i) => {
    console.log(`  ${i + 1}. ${event.type} ${event.stepId ? `(step: ${event.stepId})` : ''}`);
  });
  
  process.exit(0);
}

testEventEmitter().catch(err => {
  console.error('❌ Error:', err);
  process.exit(1);
});