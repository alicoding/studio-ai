name: Deploy

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      deployments: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --run
        
      - name: Build application
        run: npm run build
        
      - name: Determine environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Deploy to ${{ steps.determine-env.outputs.environment }}
        run: |
          echo "Deploying to ${{ steps.determine-env.outputs.environment }} environment"
          # Add your deployment script here
          # Examples:
          # - Deploy to Vercel: npx vercel --prod
          # - Deploy to Netlify: npx netlify deploy --prod
          # - Deploy to AWS: aws s3 sync dist/ s3://your-bucket
          # - Deploy to Docker: docker build and push
          
      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ steps.determine-env.outputs.environment }}';
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              auto_merge: false,
              required_contexts: [],
              production_environment: environment === 'production'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: environment === 'production' 
                ? 'https://studio-ai.example.com'
                : 'https://staging.studio-ai.example.com',
              description: 'Deployment completed successfully'
            });